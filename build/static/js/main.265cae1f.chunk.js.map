{"version":3,"sources":["components/ImageViewer.ts","components/Viewer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BG_COLOR","ImageViewer","width","arguments","length","undefined","height","Object","classCallCheck","this","_app","_appText","_appImageSprite","_container","PIXI","backgroundColor","resolution","window","devicePixelRatio","preserveDrawingBuffer","x","screen","y","pivot","stage","addChild","anchor","set","createClass","key","value","id","document","getElementById","appendChild","view","setShirtImage","text","texture","from","sprite","scale","url","toDataURL","Viewer","_React$Component","props","_this","possibleConstructorReturn","getPrototypeOf","call","_viewer","state","imgUrl","changeText","bind","assertThisInitialized","changeRadio","getImage","inherits","mount","setImage","getImageUrl","setState","event","target","setText","react_default","a","createElement","Container","InputContainer","Title","InputText","defaultValue","onChange","ThumbnailList","ThumbnailListItem","type","name","onClick","Thumbnail","src","Button","href","download","React","Component","styled","div","_templateObject","textarea","_templateObject2","_templateObject3","_templateObject4","p","_templateObject5","ul","_templateObject6","li","_templateObject7","img","_templateObject8","App","className","Viewer_Viewer","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.265cae1f.chunk.js","sourcesContent":["import * as PIXI from 'pixi.js';\n\nconst BG_COLOR = 0xffffff;\n\nexport class ImageViewer {\n  private _app: PIXI.Application;\n  private _appText: PIXI.Text;\n  private _appImageSprite?: PIXI.Sprite;\n  private _container: PIXI.Container;\n\n  constructor(width: number = 400, height: number = 300) {\n    this._app = new PIXI.Application({\n      width: width,\n      height: height,\n      backgroundColor: BG_COLOR,\n      resolution: window.devicePixelRatio || 1,\n      preserveDrawingBuffer: true,\n    });\n    this._container = new PIXI.Container();\n    this._container.x = this._app.screen.width / 2;\n    this._container.y = this._app.screen.height / 2;\n    this._container.pivot.x = this._container.width / 2;\n    this._container.pivot.y = this._container.height / 2;\n\n    this._app.stage.addChild(this._container);\n    this._appText = new PIXI.Text('');\n    this._appText.anchor.set(0.5);\n    this._appText.y = 80;\n    this._container.addChild(this._appText);\n  }\n\n  mount(id: string) {\n    //@ts-ignore\n    document.getElementById(id).appendChild(this._app.view);\n\n    this.setShirtImage();\n  }\n\n  setText(text: string) {\n    this._appText.text = text;\n    this._container.addChild(this._appText);\n  }\n\n  setShirtImage() {\n    const texture = PIXI.Texture.from('/assets/images/tshirt.svg');\n    const sprite = new PIXI.Sprite(texture);\n    sprite.anchor.set(0.5);\n    sprite.scale.set(0.2);\n    this._container.addChild(sprite);\n  }\n\n  setImage(url: string) {\n    const texture = PIXI.Texture.from(url);\n    this._appImageSprite = new PIXI.Sprite(texture);\n    this._appImageSprite.anchor.set(0.5);\n    this._appImageSprite.scale.set(0.2);\n    this._container.addChild(this._appImageSprite);\n  }\n  getImageUrl(): string {\n    return this._app.view.toDataURL('image/png');\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { ImageViewer } from './ImageViewer';\n\ninterface Props {}\ninterface State {\n  text: string;\n  imgUrl: string;\n}\nexport class Viewer extends React.Component<Props, State> {\n  private _viewer: ImageViewer;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      text: '',\n      imgUrl: '#',\n    };\n    this.changeText = this.changeText.bind(this);\n    this.changeRadio = this.changeRadio.bind(this);\n    this.getImage = this.getImage.bind(this);\n    this._viewer = new ImageViewer();\n  }\n\n  componentDidMount(): void {\n    this._viewer.mount('app');\n    this._viewer.setImage('/assets/images/cat1_smile.png');\n  }\n\n  getImage() {\n    const imgUrl = this._viewer.getImageUrl();\n    this.setState({ imgUrl });\n  }\n\n  changeText(event: React.ChangeEvent<HTMLTextAreaElement>) {\n    this.setState({ text: event.target.value });\n    this._viewer.setText(event.target.value);\n  }\n\n  changeRadio(event: React.MouseEvent<HTMLInputElement>) {\n    //@ts-ignore\n    this.setState({ text: event.target.value });\n    //@ts-ignore\n    this._viewer.setImage(event.target.value);\n  }\n\n  render() {\n    return (\n      <Container>\n        <div id=\"app\" />\n        <InputContainer>\n          <Title>テキスト</Title>\n          <InputText defaultValue={this.state.text} onChange={this.changeText} />\n\n          <ThumbnailList>\n            <ThumbnailListItem>\n              <label>\n                <input type=\"radio\" name=\"image\" value=\"/assets/images/cat1_smile.png\" onClick={this.changeRadio} />\n                <Thumbnail src={'/assets/images/cat1_smile.png'} />\n              </label>\n            </ThumbnailListItem>\n            <ThumbnailListItem>\n              <label>\n                <input type=\"radio\" name=\"image\" value=\"/assets/images/cat2_angry.png\" onClick={this.changeRadio} />\n                <Thumbnail src={'/assets/images/cat2_angry.png'} />\n              </label>\n            </ThumbnailListItem>\n            <ThumbnailListItem>\n              <label>\n                <input type=\"radio\" name=\"image\" value=\"/assets/images/cat3_cry.png\" onClick={this.changeRadio} />\n                <Thumbnail src={'/assets/images/cat3_cry.png'} />\n              </label>\n            </ThumbnailListItem>\n            <ThumbnailListItem>\n              <label>\n                <input type=\"radio\" name=\"image\" value=\"/assets/images/cat4_laugh.png\" onClick={this.changeRadio} />\n                <Thumbnail src={'/assets/images/cat4_laugh.png'} />\n              </label>\n            </ThumbnailListItem>\n          </ThumbnailList>\n\n          <Button href={this.state.imgUrl} onClick={this.getImage} download=\"test.png\">\n            ダウンロード\n          </Button>\n        </InputContainer>\n      </Container>\n    );\n  }\n}\n\nconst Container = styled.div`\n  //display: flex;\n  //flex-direction: column;\n  //justify-content: space-between;\n`;\n\nconst InputText = styled.textarea`\n  border: solid 1px #666;\n  width: 100%;\n  padding: 10px;\n  box-sizing: border-box;\n`;\n\nconst InputContainer = styled.div`\n  //padding: 10px;\n  width: 600px;\n  margin: 0 auto;\n`;\n\nconst Button = styled.a`\n  display: block;\n  margin-top: 20px;\n  background-color: #3b79ff;\n  padding: 10px;\n  border-radius: 10px;\n  border: none;\n  color: #fff;\n  font-size: 16px;\n  font-weight: bold;\n  text-decoration: none;\n`;\n\nconst Title = styled.p`\n  text-align: left;\n  margin: 0 0 10px 0;\n  font-weight: bold;\n`;\n\nconst ThumbnailList = styled.ul`\n  padding: 0;\n  display: flex;\n  justify-content: space-around;\n`;\nconst ThumbnailListItem = styled.li`\n  list-style: none;\n  margin-left: 20px;\n  &:first-child {\n    margin-left: 0;\n  }\n  > label {\n    display: flex;\n    align-items: center;\n  }\n`;\n\nconst Thumbnail = styled.img`\n  width: 100px;\n`;\n","import React from 'react';\nimport './App.css';\nimport { Viewer } from './components/Viewer';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Viewer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}